[{"_id":"a1","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"What is Flutter?","bio":"Flutter is an open source framework to create high quality, high performance mobile applications across mobile operating systems - Android and iOS. It provides a simple, powerful, efficient and easy to understand SDK to write mobile application in Google’s own language, Dart. This tutorial walks through the basics of Flutter framework, installation of Flutter SDK, setting up Android Studio to develop Flutter based application, architecture of Flutter framework and developing all type of mobile applications using Flutter framework."},{"_id":"a2","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"Feature of Flutter","bio":"Open-Source: Flutter is a free and open-source framework for developing mobile applications.\r\n\r\nCross-platform: This feature allows Flutter to write the code once, maintain, and can run on different platforms. It saves the time, effort, and money of the developers.\r\n\r\nHot Reload: Whenever the developer makes changes in the code, then these changes can be seen instantaneously with Hot Reload. It means the changes immediately visible in the app itself. It is a very handy feature, which allows the developer to fix the bugs instantly.\r\n\r\nAccessible Native Features and SDKs: This feature allows the app development process easy and delightful through Flutter's native code, third-party integration, and platform APIs. Thus, we can easily access the SDKs on both platforms.\r\n\r\nMinimal code: Flutter app is developed by Dart programming language, which uses JIT and AOT compilation to improve the overall start-up time, functioning and accelerates the performance. JIT enhances the development system and refreshes the UI without putting extra effort into building a new one.\r\n\r\nWidgets: The Flutter framework offers widgets, which are capable of developing customizable specific designs. Most importantly, Flutter has two sets of widgets: Material Design and Cupertino widgets that help to provide a glitch-free experience on all platforms"},{"_id":"a3","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"Advantage of Flutter?","bio":"Flutter fulfills the custom needs and requirements for developing mobile applications. It also offers many advantages, which are listed below.\r\n\r\n1.It makes the app development process extremely fast because of the hot-reload feature. This feature allows us to change or update the code are reflected as soon as the alterations are made.\r\n2.It provides the smoother and seamless scrolling experiences of using the app without much hangs or cuts, which makes running applications faster in comparison to other mobile app development frameworks.\r\n3.Flutter reduces the time and efforts of testing. As we know, flutter apps are cross-platform so that testers do not always need to run the same set of tests on different platforms for the same app.\r\n4.It has an excellent user interface because it uses a design-centric widget, high-development tools, advanced APIs, and many more features.\r\n5.It is similar to a reactive framework where the developers do not need to update the UI content manually.\r\n6.It is suitable for MVP (Minimum Viable Product) apps because of its speedy development process and cross-platform nature."},{"_id":"a4","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"Disadvantage of Flutter?","bio":"We have seen earlier that the Flutter has many advantages, but it also contains some disadvantages, which are given below.\r\n\r\n1.The Flutter is a comparatively new language that needs continuous integration support through the maintenance of scripts.\r\n2.It provides very limited access to SDK libraries. It means a developer does not have a lot of functionalities to create a mobile application. Such types of functionalities need to be developed by the Flutter developer themselves.\r\n3.The Flutter apps do not support the browser. It only supports Android and iOS platforms.\r\n4.It uses Dart programming for coding, so a developer needs to learn new technologies. However, it is easy to learn for developers."},{"_id":"a5","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"Install Flutter in Windows","bio":"In this section, let us see how to install Flutter SDK and its requirement in a windows system.\r\n\r\nStep 1 − Go to URL, https://flutter.dev/docs/get-started/install/windows and download the latest Flutter SDK. As of April 2019, the version is 1.2.1 and the file is flutter_windows_v1.2.1-stable.zip.\r\n\r\nStep 2 − Unzip the zip archive in a folder, say C:\\flutter\\\r\n\r\nStep 3 − Update the system path to include flutter bin directory.\r\n\r\nStep 4 − Flutter provides a tool, flutter doctor to check that all the requirement of flutter development is met.\r\n\r\nflutter doctor\r\nStep 5 − Running the above command will analyze the system and show its report as shown below −\r\n\r\nDoctor summary (to see all details, run flutter doctor -v):\r\n[√] Flutter (Channel stable, v1.2.1, on Microsoft Windows [Version\r\n10.0.17134.706], locale en-US)\r\n[√] Android toolchain - develop for Android devices (Android SDK version\r\n28.0.3)\r\n[√] Android Studio (version 3.2)\r\n[√] VS Code, 64-bit edition (version 1.29.1)\r\n[!] Connected device\r\n! No devices available\r\n! Doctor found issues in 1 category.\r\nThe report says that all development tools are available but the device is not connected. We can fix this by connecting an android device through USB or starting an android emulator.\r\n\r\nStep 6 − Install the latest Android SDK, if reported by flutter doctor\r\n\r\nStep 7 − Install the latest Android Studio, if reported by flutter doctor\r\n\r\nStep 8 − Start an android emulator or connect a real android device to the system.\r\n\r\nStep 9 − Install Flutter and Dart plugin for Android Studio. It provides startup template to create new Flutter application, an option to run and debug Flutter application in the Android studio itself, etc.,\r\n\r\nOpen Android Studio.\r\n\r\nClick File → Settings → Plugins.\r\n\r\nSelect the Flutter plugin and click Install.\r\n\r\nClick Yes when prompted to install the Dart plugin.\r\n\r\nRestart Android studio."},{"_id":"a6","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"Install Flutter in MacOS","bio":"To install Flutter on MacOS, you will have to follow the following steps −\r\n\r\nStep 1 − Go to URL, https://flutter.dev/docs/get-started/install/macos and download latest Flutter SDK. As of April 2019, the version is 1.2.1 and the file is flutter_macos_v1.2.1- stable.zip.\r\n\r\nStep 2 − Unzip the zip archive in a folder, say /path/to/flutter\r\n\r\nStep 3 − Update the system path to include flutter bin directory (in ~/.bashrc file).\r\n\r\n> export PATH = \"$PATH:/path/to/flutter/bin\"\r\nStep 4 − Enable the updated path in the current session using below command and then verify it as well.\r\n\r\nsource ~/.bashrc\r\nsource $HOME/.bash_profile\r\necho $PATH\r\nFlutter provides a tool, flutter doctor to check that all the requirement of flutter development is met. It is similar to the Windows counterpart.\r\n\r\nStep 5 − Install latest XCode, if reported by flutter doctor\r\n\r\nStep 6 − Install latest Android SDK, if reported by flutter doctor\r\n\r\nStep 7 − Install latest Android Studio, if reported by flutter doctor\r\n\r\nStep 8 − Start an android emulator or connect a real android device to the system to develop android application.\r\n\r\nStep 9 − Open iOS simulator or connect a real iPhone device to the system to develop iOS application.\r\n\r\nStep 10 − Install Flutter and Dart plugin for Android Studio. It provides the startup template to create a new Flutter application, option to run and debug Flutter application in the Android studio itself, etc.,\r\n\r\nOpen Android Studio\r\n\r\nClick Preferences → Plugins\r\n\r\nSelect the Flutter plugin and click Install\r\n\r\nClick Yes when prompted to install the Dart plugin.\r\n\r\nRestart Android studio."},{"_id":"a7","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"Create a simple Flutter application","bio":"In this chapter, let us create a simple Flutter application to understand the basics of creating a flutter application in the Android Studio.\r\n\r\nStep 1 − Open Android Studio\r\n\r\nStep 2 − Create Flutter Project. For this, click File → New → New Flutter Project\r\n\r\nNew Flutter Project\r\nStep 3 − Select Flutter Application. For this, select Flutter Application and click Next.\r\n\r\nFlutter Application Next\r\nStep 4 − Configure the application as below and click Next.\r\n\r\nProject name: hello_app\r\n\r\nFlutter SDK Path: <path_to_flutter_sdk>\r\n\r\nProject Location: <path_to_project_folder>\r\n\r\nDescription: Flutter based hello world application\r\n\r\nProject Name\r\nStep 5 − Configure Project.\r\n\r\nSet the company domain as flutterapp.tutorialspoint.com and click Finish.\r\n\r\nStep 6 − Enter Company domain.\r\n\r\nAndroid Studio creates a fully working flutter application with minimal functionality. \r\n\r\nStep 7 − Replace the dart code in the lib/main.dart file with the below code −\r\n\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() => runApp(MyApp());\r\n\r\nclass MyApp extends StatelessWidget {\r\n   // This widget is the root of your application.\r\n   @override\r\n   Widget build(BuildContext context) {\r\n      return MaterialApp(\r\n         title: 'Hello World Demo Application',\r\n         theme: ThemeData(\r\n            primarySwatch: Colors.blue,\r\n         ),\r\n         home: MyHomePage(title: 'Home page'),\r\n      );\r\n   }\r\n}\r\nclass MyHomePage extends StatelessWidget {\r\n   MyHomePage({Key key, this.title}) : super(key: key);\r\n   final String title;\r\n\r\n   @override\r\n   Widget build(BuildContext context) {\r\n      return Scaffold(\r\n         appBar: AppBar(\r\n            title: Text(this.title),\r\n         ),\r\n         body: Center(\r\n            child:\r\n            Text(\r\n               'Hello World',\r\n            )\r\n         ),\r\n      );\r\n   }\r\n}"},{"_id":"a8","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"Flutter Architecture","bio":"In this section, we are going to discuss the architecture of the Flutter framework. The Flutter architecture mainly comprises of four components.\r\n\r\nFlutter Engine\r\nFoundation Library\r\nWidgets\r\nDesign Specific Widgets\r\nFlutter Engine\r\nIt is a portable runtime for high-quality mobile apps and primarily based on the C++ language. It implements Flutter core libraries that include animation and graphics, file and network I/O, plugin architecture, accessibility support, and a dart runtime for developing, compiling, and running Flutter applications. It takes Google's open-source graphics library, Skia, to render low-level graphics.\r\n\r\nFoundation Library\r\nIt contains all the required packages for the basic building blocks of writing a Flutter application. These libraries are written in Dart language.\r\n\r\n\r\nWidgets\r\nIn Flutter, everything is a widget, which is the core concept of this framework. Widget in the Flutter is basically a user interface component that affects and controls the view and interface of the app. It represents an immutable description of part of the user interface and includes graphics, text, shapes, and animations that are created using widgets. The widgets are similar to the React components.\r\n\r\nIn Flutter, the application is itself a widget that contains many sub widgets. It means the app is the top-level widget, and its UI is build using one or more children widgets, which again includes sub child widgets. This feature helps you to create a complex user interface very easily.\r\n\r\nWe can understand it from the hello world example created in the previous section. Here, we are going to explain the example with the following diagram.\r\n\r\nFlutter Architecture\r\nIn the above example, we can see that all the components are widgets that contain child widgets. Thus, the Flutter application is itself a widget.\r\n\r\nDesign Specific Widgets\r\nThe Flutter framework has two sets of widgets that conform to specific design languages. These are Material Design for Android application and Cupertino Style for IOS application."},{"_id":"a9","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"What is Dart Programming?","bio":"Dart is an open-source, general-purpose, object-oriented programming language with C-style syntax developed by Google in 2011. The purpose of Dart programming is to create a frontend user interfaces for the web and mobile apps. It is under active development, compiled to native machine code for building mobile apps, inspired by other programming languages such as Java, JavaScript, C#, and is Strongly Typed. Since Dart is a compiled language so you cannot execute your code directly; instead, the compiler parses it and transfer it into machine code.\r\n\r\nIt supports most of the common concepts of programming languages like classes, interfaces, functions, unlike other programming languages. Dart language does not support arrays directly. It supports collection, which is used to replicate the data structure such as arrays, generics, and optional typing.\r\n\r\nThe following example shows simple Dart programming.\r\n\r\n\r\nvoid main() {  \r\n  for (int i = 0; i < 5; i++) {  \r\n    print('hello ${i + 1}');  \r\n  }  \r\n}  "},{"_id":"a10","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"Flutter Widgets","bio":"Whenever you are going to code for building anything in Flutter, it will be inside a widget. The central purpose is to build the app out of widgets. It describes how your app view should look like with their current configuration and state. When you made any alteration in the code, the widget rebuilds its description by calculating the difference of previous and current widget to determine the minimal changes for rendering in UI of the app.\r\n\r\nWidgets are nested with each other to build the app. It means the root of your app is itself a widget, and all the way down is a widget also. For example, a widget can display something, can define design, can handle interaction, etc.\r\nWe can create the Flutter widget like this:\r\n\r\nClass ImageWidget extends StatelessWidget {  \r\n         // Class Stuff  \r\n}"},{"_id":"a11","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/flutter_logo.png","name":"State Management Widget","bio":"In Flutter, there are mainly two types of widget:\r\n\r\nStatelessWidget\r\nStatefulWidget\r\nStatefulWidget\r\nA StatefulWidget has state information. It contains mainly two classes: the state object and the widget. It is dynamic because it can change the inner data during the widget lifetime. This widget does not have a build() method. It has createState() method, which returns a class that extends the Flutters State Class. The examples of the StatefulWidget are Checkbox, Radio, Slider, InkWell, Form, and TextField.\r\n\r\nExample\r\n\r\nclass Car extends StatefulWidget {  \r\n  const Car({ Key key, this.title }) : super(key: key);   \r\n  \r\n  @override  \r\n  _CarState createState() => _CarState();  \r\n}  \r\n  \r\nclass _CarState extends State<Car> {  \r\n  @override  \r\n  Widget build(BuildContext context) {  \r\n    return Container(  \r\n      color: const Color(0xFEEFE),  \r\n           child: Container(  \r\n            child: Container( //child: Container() )  \r\n        )  \r\n    );  \r\n  }  \r\n}  \r\nStatelessWidget\r\nThe StatelessWidget does not have any state information. It remains static throughout its lifecycle. The examples of the StatelessWidget are Text, Row, Column, Container, etc.\r\n\r\nExample\r\n\r\nclass MyStatelessCarWidget extends StatelessWidget {  \r\n  const MyStatelessCarWidget ({ Key key }) : super(key: key);  \r\n  \r\n  @override  \r\n  Widget build(BuildContext context) {  \r\n    return Container(color: const Color(0x0xFEEFE));  \r\n  }  \r\n}  "}]