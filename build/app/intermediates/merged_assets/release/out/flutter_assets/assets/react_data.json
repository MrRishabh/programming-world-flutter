[{"_id":"r1","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"What is ReactJS?","bio":"React is a front-end library developed by Facebook. It is used for handling the view layer for web and mobile apps. ReactJS allows us to create reusable UI components. It is currently one of the most popular JavaScript libraries and has a strong foundation and large community behind it.According to React official documentation, following is the definition −\r\n\r\nReact is a library for building composable user interfaces. It encourages the creation of reusable UI components, which present data that changes over time. Lots of people use React as the V in MVC. React abstracts away the DOM from you, offering a simpler programming model and better performance. React can also render on the server using Node, and it can power native apps using React Native. React implements one-way reactive data flow, which reduces the boilerplate and is easier to reason about than traditional data binding."},{"_id":"r2","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"React features","bio":"JSX − JSX is JavaScript syntax extension. It isn't necessary to use JSX in React development, but it is recommended.\r\n\r\nComponents − React is all about components. You need to think of everything as a component. This will help you maintain the code when working on larger scale projects.\r\n\r\nUnidirectional data flow and Flux − React implements one-way data flow which makes it easy to reason about your app. Flux is a pattern that helps keeping your data unidirectional.\r\n\r\nLicense − React is licensed under the Facebook Inc. Documentation is licensed under CC BY 4.0."},{"_id":"r3","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"React Advantages and Limitations","bio":"React Advantages\r\n\r\n1.Uses virtual DOM which is a JavaScript object. This will improve apps performance, since JavaScript virtual DOM is faster than the regular DOM.\r\n\r\n2.Can be used on client and server side as well as with other frameworks.\r\n\r\n3.Component and data patterns improve readability, which helps to maintain larger apps.\r\n\r\nReact Limitations\r\n\r\n1.Covers only the view layer of the app, hence you still need to choose other technologies to get a complete tooling set for development.\r\n\r\n2.Uses inline templating and JSX, which might seem awkward to some developers."},{"_id":"r4","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"Install NodeJS for react set up","bio":"1.Download latest version of Node.js installable archive file from Node.js Downloads.\r\n2.Use the MSI file and follow the prompts to install the Node.js. By default, the installer uses the Node.js distribution in C:\\Program Files\\nodejs. The installer should set the C:\\Program Files\\nodejs\\bin directory in window's PATH environment variable. Restart any open command prompts for the change to take effect.\r\n3.After successfully installing NodeJS, we can start installing React upon it using npm. You can install ReactJS in two ways\r\n\r\na.Using webpack and babel.\r\nb.Using the create-react-app command"},{"_id":"r5","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"Installing ReactJS using webpack and babel part-1","bio":"Step 1 - Create the Root Folder\r\nCreate a folder with name reactApp on the desktop to install all the required files, using the mkdir command.\r\n\r\nC:\\Users\\username\\Desktop>mkdir reactApp\r\nC:\\Users\\username\\Desktop>cd reactApp\r\n\r\nTo create any module, it is required to generate the package.json file. Therefore, after Creating the folder, we need to create a package.json file. To do so you need to run the npm init command from the command prompt.\r\n\r\nC:\\Users\\username\\Desktop\\reactApp>npm init\r\n\r\nThis command asks information about the module such as packagename, description, author etc. you can skip these using the –y option.\r\n\r\nStep 2 - install React and react dom\r\nSince our main task is to install ReactJS, install it, and its dom packages, using install react and react-dom commands of npm respectively. You can add the packages we install, to package.json file using the --save option.\r\n\r\nC:\\Users\\username\\Desktop\\reactApp>npm install react react-dom --save\r\n\r\nStep 3 - Install webpack\r\nSince we are using webpack to generate bundler install webpack, webpack-dev-server and webpack-cli.\r\n\r\nC:\\Users\\username\\Desktop\\reactApp>npm install webpack webpack-dev-server webpack-cli --save\r\n\r\nStep 4 - Install babel\r\nInstall babel, and its plugins babel-core, babel-loader, babel-preset-env, babel-preset-react and, html-webpack-plugin\r\n\r\nC:\\Users\\username\\Desktop\\reactApp>npm install babel-core babel-loader babel-preset-env \r\n   babel-preset-react html-webpack-plugin --save-dev\r\n\r\nStep 5 - Create the Files\r\nTo complete the installation, we need to create certain files namely, index.html, App.js, main.js, webpack.config.js and, .babelrc. You can create these files manually or, using command prompt.\r\n\r\nC:\\Users\\username\\Desktop\\reactApp>type nul > index.html\r\nC:\\Users\\username\\Desktop\\reactApp>type nul > App.js\r\nC:\\Users\\username\\Desktop\\reactApp>type nul > main.js\r\nC:\\Users\\username\\Desktop\\reactApp>type nul > webpack.config.js\r\nC:\\Users\\username\\Desktop\\reactApp>type nul > .babelrc\r\n\r\nStep 6 - Set Compiler, Server and Loaders\r\nOpen webpack-config.js file and add the following code. We are setting webpack entry point to be main.js. Output path is the place where bundled app will be served. We are also setting the development server to 8001 port. You can choose any port you want.\r\n\r\nwebpack.config.js\r\n\r\nconst path = require('path');\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\r\n\r\nmodule.exports = {\r\n   entry: './main.js',\r\n   output: {\r\n      path: path.join(__dirname, '/bundle'),\r\n      filename: 'index_bundle.js'\r\n   },\r\n   devServer: {\r\n      inline: true,\r\n      port: 8001\r\n   },\r\n   module: {\r\n      rules: [\r\n         {\r\n            test: /\\.jsx?$/,\r\n            exclude: /node_modules/,\r\n            loader: 'babel-loader',\r\n            query: {\r\n               presets: ['es2015', 'react']\r\n            }\r\n         }\r\n      ]\r\n   },\r\n   plugins:[\r\n      new HtmlWebpackPlugin({\r\n         template: './index.html'\r\n      })\r\n   ]\r\n}\r\nOpen the package.json and delete \"test\" \"echo \\\"Error: no test specified\\\" && exit 1\" inside \"scripts\" object. We are deleting this line since we will not do any testing in this tutorial. Let's add the start and build commands instead.\r\n\r\n\"start\": \"webpack-dev-server --mode development --open --hot\",\r\n\"build\": \"webpack --mode production\"\r\n"},{"_id":"r6","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"Installing ReactJS using webpack and babel part-2","bio":"Step 7 - index.html\r\nThis is just regular HTML. We are setting div id = \"app\" as a root element for our app and adding index_bundle.js script, which is our bundled app file.\r\n\r\n<!DOCTYPE html>\r\n<html lang = \"en\">\r\n   <head>\r\n      <meta charset = \"UTF-8\">\r\n      <title>React App</title>\r\n   </head>\r\n   <body>\r\n      <div id = \"app\"></div>\r\n      <script src = 'index_bundle.js'></script>\r\n   </body>\r\n</html>\r\nStep 8 − App.jsx and main.js\r\nThis is the first React component. We will explain React components in depth in a subsequent chapter. This component will render Hello World.\r\n\r\nApp.js\r\n\r\nimport React, { Component } from 'react';\r\nclass App extends Component{\r\n   render(){\r\n      return(\r\n         <div>\r\n            <h1>Hello World</h1>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default App;\r\nWe need to import this component and render it to our root App element, so we can see it in the browser.\r\n\r\nmain.js\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.js';\r\n\r\nReactDOM.render(<App />, document.getElementById('app'));\r\nNote − Whenever you want to use something, you need to import it first. If you want to make the component usable in other parts of the app, you need to export it after creation and import it in the file where you want to use it.\r\n\r\nCreate a file with name .babelrc and copy the following content to it.\r\n\r\n{\r\n   \"presets\":[\"env\", \"react\"]\r\n}\r\nStep 9 - Running the Server\r\nThe setup is complete and we can start the server by running the following command.\r\n\r\nC:\\Users\\username\\Desktop\\reactApp>npm start\r\nIt will show the port we need to open in the browser. In our case, it is http://localhost:8001/.\r\n\r\nStep 10 - Generating the bundle\r\nFinally, to generate the bundle you need to run the build command in the command prompt as −\r\n\r\nC:\\Users\\Tutorialspoint\\Desktop\\reactApp>npm run build"},{"_id":"r7","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"Installing ReactJS Using the create-react-app command","bio":"Instead of using webpack and babel you can install ReactJS more simply by installing create-react-app.\r\n\r\nStep 1 - install create-react-app\r\nBrowse through the desktop and install the Create React App using command prompt as shown below −\r\n\r\nC:\\Users\\Tutorialspoint>cd C:\\Users\\Tutorialspoint\\Desktop\\\r\nC:\\Users\\Tutorialspoint\\Desktop>npx create-react-app my-app\r\nThis will create a folder named my-app on the desktop and installs all the required files in it.\r\n\r\nStep 2 - Delete all the source files\r\nBrowse through the src folder in the generated my-app folder and remove all the files in it as shown below −\r\n\r\nC:\\Users\\Tutorialspoint\\Desktop>cd my-app/src\r\nC:\\Users\\Tutorialspoint\\Desktop\\my-app\\src>del *\r\nC:\\Users\\Tutorialspoint\\Desktop\\my-app\\src\\*, Are you sure (Y/N)? y\r\nStep 3 - Add files\r\nAdd files with names index.css and index.js in the src folder as −\r\n\r\nC:\\Users\\Tutorialspoint\\Desktop\\my-app\\src>type nul > index.css\r\nC:\\Users\\Tutorialspoint\\Desktop\\my-app\\src>type nul > index.js\r\nIn the index.js file add the following code\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nStep 4 - Run the project\r\nFinally, run the project using the start command.\r\n\r\nnpm start"},{"_id":"r8","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"JSX in React","bio":"React uses JSX for templating instead of regular JavaScript. It is not necessary to use it, however, following are some pros that come with it.\r\n\r\nIt is faster because it performs optimization while compiling code to JavaScript.\r\n\r\nIt is also type-safe and most of the errors can be caught during compilation.\r\n\r\nIt makes it easier and faster to write templates, if you are familiar with HTML.\r\n\r\nUsing JSX\r\nJSX looks like a regular HTML in most cases. We already used it in the Environment Setup chapter. Look at the code from App.jsx where we are returning div.\r\n\r\nApp.jsx\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n   render() {\r\n      return (\r\n         <div>\r\n            Hello World!!!\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default App;\r\nEven though it's similar to HTML, there are a couple of things we need to keep in mind when working with JSX."},{"_id":"r9","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"JavaScript Expression","bio":"JavaScript Expressions\r\nJavaScript expressions can be used inside of JSX. We just need to wrap it with curly brackets {}. The following example will render 2.\r\n\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h1>{1+1}</h1>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default App;\r\n\r\nReact JSX Inline Javascript\r\nWe cannot use if else statements inside JSX, instead we can use conditional (ternary) expressions. In the following example, variable i equals to 1 so the browser will render true, If we change it to some other value, it will render false.\r\n\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n   render() {\r\n      var i = 1;\r\n      return (\r\n         <div>\r\n            <h1>{i == 1 ? 'True!' : 'False'}</h1>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default App;"},{"_id":"r10","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"State in React","bio":"State is the place where the data comes from. We should always try to make our state as simple as possible and minimize the number of stateful components. If we have, for example, ten components that need data from the state, we should create one container component that will keep the state for all of them.\r\n\r\nUsing State\r\nThe following sample code shows how to create a stateful component using EcmaScript2016 syntax.\r\n\r\nApp.jsx\r\n\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n   constructor(props) {\r\n      super(props);\r\n\t\t\r\n      this.state = {\r\n         header: \"Header from state...\",\r\n         content: \"Content from state...\"\r\n      }\r\n   }\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h1>{this.state.header}</h1>\r\n            <h2>{this.state.content}</h2>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default App;\r\n\r\nmain.js\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nReactDOM.render(<App />, document.getElementById('app'));"},{"_id":"r11","picture":"https://findjobalerts.com/wp-content/uploads/2020/07/react_icon-scaled.jpg","name":"Props in React","bio":"The main difference between state and props is that props are immutable. This is why the container component should define the state that can be updated and changed, while the child components should only pass data from the state using props.\r\n\r\nUsing Props\r\nWhen we need immutable data in our component, we can just add props to reactDOM.render() function in main.js and use it inside our component.\r\n\r\nApp.jsx\r\nimport React from 'react';\r\n\r\nclass App extends React.Component {\r\n   render() {\r\n      return (\r\n         <div>\r\n            <h1>{this.props.headerProp}</h1>\r\n            <h2>{this.props.contentProp}</h2>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default App;\r\nmain.js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\n\r\nReactDOM.render(<App headerProp = \"Header from props...\" contentProp = \"Content\r\n   from props...\"/>, document.getElementById('app'));\r\n\r\nexport default App;"}]